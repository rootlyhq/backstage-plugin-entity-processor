{"version":3,"file":"index.cjs.js","sources":["../src/processor/RootlyEntityProcessor.ts","../src/module.ts"],"sourcesContent":["import {\n  DiscoveryService,\n  LoggerService,\n  RootConfigService,\n} from '@backstage/backend-plugin-api';\nimport { Entity, stringifyEntityRef } from '@backstage/catalog-model';\nimport {\n  CatalogProcessor,\n  CatalogProcessorEmit,\n  processingResult,\n} from '@backstage/plugin-catalog-node';\nimport { LocationSpec } from '@backstage/plugin-catalog-common';\nimport {\n  ROOTLY_ANNOTATION_FUNCTIONALITY_ID,\n  ROOTLY_ANNOTATION_FUNCTIONALITY_SLUG,\n  ROOTLY_ANNOTATION_ORG_ID,\n  ROOTLY_ANNOTATION_TEAM_ID,\n  ROOTLY_ANNOTATION_TEAM_SLUG,\n  RootlyApi,\n} from '@rootly/backstage-plugin-common';\nimport {\n  ROOTLY_ANNOTATION_SERVICE_ID,\n  ROOTLY_ANNOTATION_SERVICE_SLUG,\n  RootlyEntity,\n} from '@rootly/backstage-plugin-common';\n\n/**\n * A function which given an entity, determines if it should be processed for linguist tags.\n * @public\n */\nexport type ShouldProcessEntity = (entity: Entity) => boolean;\n\nexport interface RootlyEntityProcessorOptions {\n  logger: LoggerService;\n  discovery: DiscoveryService;\n  config: RootConfigService;\n}\n\nexport class RootlyEntityProcessor implements CatalogProcessor {\n  private logger: LoggerService;\n  private discovery: DiscoveryService;\n  private config: RootConfigService;\n\n  private shouldProcessEntity: ShouldProcessEntity = (entity: Entity) => {\n    return (\n      (this.serviceIdAnnotations(entity) ||\n        this.functionalityIdAnnotations(entity) ||\n        this.teamIdAnnotations(entity)) !== undefined\n    );\n  };\n\n  private serviceIdAnnotations: (entity: Entity) => string | undefined = (\n    entity: Entity,\n  ) => {\n    return (\n      entity.metadata.annotations?.[ROOTLY_ANNOTATION_SERVICE_ID] ||\n      entity.metadata.annotations?.[ROOTLY_ANNOTATION_SERVICE_SLUG]\n    );\n  };\n\n  private functionalityIdAnnotations: (entity: Entity) => string | undefined = (\n    entity: Entity,\n  ) => {\n    return (\n      entity.metadata.annotations?.[ROOTLY_ANNOTATION_FUNCTIONALITY_ID] ||\n      entity.metadata.annotations?.[ROOTLY_ANNOTATION_FUNCTIONALITY_SLUG]\n    );\n  };\n\n  private teamIdAnnotations: (entity: Entity) => string | undefined = (\n    entity: Entity,\n  ) => {\n    return (\n      entity.metadata.annotations?.[ROOTLY_ANNOTATION_TEAM_ID] ||\n      entity.metadata.annotations?.[ROOTLY_ANNOTATION_TEAM_SLUG]\n    );\n  };\n\n  constructor({ discovery, config, logger }: RootlyEntityProcessorOptions) {\n    this.logger = logger;\n    this.discovery = discovery;\n    this.config = config;\n    console.log('RootlyEntityProcessor initialized');\n  }\n\n  useRootlyClient = ({\n    discovery,\n    config,\n    organizationId,\n  }: {\n    discovery: DiscoveryService;\n    config: RootConfigService;\n    organizationId?: string;\n  }) => {\n    const configKeys = config.getConfig('rootly').keys();\n\n    let token = config.getOptionalString(`rootly.${configKeys.at(0)}.apiKey`);\n\n    if (organizationId) {\n      token = config.getOptionalString(`rootly.${organizationId}.apiKey`);\n    } else if (configKeys.length > 1) {\n      let defaultOrgId = config.getConfig('rootly').keys().at(0);\n      for (const orgId of config.getConfig('rootly').keys()) {\n        if (config.getOptionalBoolean(`rootly.${orgId}.isDefault`)) {\n          defaultOrgId = orgId;\n          break;\n        }\n      }\n      token = config.getOptionalString(`rootly.${defaultOrgId}.apiKey`);\n    }\n\n    const client = new RootlyApi({\n      apiProxyPath: discovery.getBaseUrl('proxy'),\n      apiToken: new Promise(resolve => {\n        resolve({ token: token });\n      }),\n    });\n    return client;\n  };\n\n  getProcessorName(): string {\n    return 'RootlyEntityProcessor';\n  }\n\n  async postProcessEntity(\n    entity: Entity,\n    location: LocationSpec,\n    emit: CatalogProcessorEmit,\n  ): Promise<Entity> {\n    if (this.shouldProcessEntity(entity)) {\n      const rootlyClient = this.useRootlyClient({\n        discovery: this.discovery,\n        config: this.config,\n        organizationId: entity.metadata.annotations?.[ROOTLY_ANNOTATION_ORG_ID],\n      });\n      if (this.serviceIdAnnotations(entity)) {\n        return this.processRootlyService(rootlyClient, entity, location, emit);\n      } else if (this.functionalityIdAnnotations(entity)) {\n        return this.processRootlyFunctionality(\n          rootlyClient,\n          entity,\n          location,\n          emit,\n        );\n      } else if (this.teamIdAnnotations(entity)) {\n        return this.processRootlyTeam(rootlyClient, entity, location, emit);\n      }\n    }\n    return entity;\n  }\n\n  async processRootlyService(\n    rootlyClient: RootlyApi,\n    entity: Entity,\n    location: LocationSpec,\n    emit: CatalogProcessorEmit,\n  ): Promise<Entity> {\n    const entityTriplet = stringifyEntityRef({\n      namespace: entity.metadata.namespace,\n      kind: entity.kind,\n      name: entity.metadata.name,\n    });\n\n    this.logger.debug(`[ROOTLY PLUGIN] Processing entity ${entityTriplet}`);\n\n    try {\n      const serviceIdAnnotation = this.serviceIdAnnotations(entity);\n      if (serviceIdAnnotation) {\n        const annotationServiceResponse = await rootlyClient.getService(\n          serviceIdAnnotation,\n        );\n        const annotationService = annotationServiceResponse.data;\n\n        if (\n          annotationService.attributes.backstage_id &&\n          annotationService.attributes.backstage_id !== entityTriplet\n        ) {\n          const servicesResponse = await rootlyClient.getServices({\n            filter: {\n              backstage_id: annotationService.attributes.backstage_id,\n            },\n          });\n          const service =\n            servicesResponse &&\n            servicesResponse.data &&\n            servicesResponse.data.length > 0\n              ? servicesResponse.data[0]\n              : null;\n          if (service) {\n            const response = await rootlyClient.updateServiceEntity(\n              entity as RootlyEntity,\n              annotationService,\n              service,\n            );\n            updateAnnotations(entity, {\n              serviceId: response.data.id,\n            });\n          }\n        } else {\n          const response = await rootlyClient.updateServiceEntity(\n            entity as RootlyEntity,\n            annotationService,\n          );\n          updateAnnotations(entity, {\n            serviceId: response.data.id,\n          });\n        }\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        if ((error.cause as any).status === 404) {\n          rootlyClient.importServiceEntity(entity as RootlyEntity);\n        } else {\n          emit(processingResult.generalError(location, error.toString()));\n        }\n      }\n    }\n\n    return entity;\n  }\n\n  async processRootlyFunctionality(\n    rootlyClient: RootlyApi,\n    entity: Entity,\n    location: LocationSpec,\n    emit: CatalogProcessorEmit,\n  ): Promise<Entity> {\n    const entityTriplet = stringifyEntityRef({\n      namespace: entity.metadata.namespace,\n      kind: entity.kind,\n      name: entity.metadata.name,\n    });\n\n    this.logger.debug(`[ROOTLY PLUGIN] Processing entity ${entityTriplet}`);\n\n    try {\n      const functionalityIdAnnotation = this.functionalityIdAnnotations(entity);\n      if (functionalityIdAnnotation) {\n        const annotationFunctionalityResponse =\n          await rootlyClient.getFunctionality(functionalityIdAnnotation);\n        const annotationFunctionality = annotationFunctionalityResponse.data;\n\n        if (\n          annotationFunctionality.attributes.backstage_id &&\n          annotationFunctionality.attributes.backstage_id !== entityTriplet\n        ) {\n          const functionalitiesResponse = await rootlyClient.getFunctionalities(\n            {\n              filter: {\n                backstage_id: annotationFunctionality.attributes.backstage_id,\n              },\n            },\n          );\n          const functionality =\n            functionalitiesResponse &&\n            functionalitiesResponse.data &&\n            functionalitiesResponse.data.length > 0\n              ? functionalitiesResponse.data[0]\n              : null;\n          if (functionality) {\n            const response = await rootlyClient.updateFunctionalityEntity(\n              entity as RootlyEntity,\n              annotationFunctionality,\n              functionality,\n            );\n            updateAnnotations(entity, {\n              functionalityId: response.data.id,\n            });\n          }\n        } else {\n          const response = await rootlyClient.updateFunctionalityEntity(\n            entity as RootlyEntity,\n            annotationFunctionality,\n          );\n          updateAnnotations(entity, {\n            functionalityId: response.data.id,\n          });\n        }\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        if ((error.cause as any).status === 404) {\n          rootlyClient.importFunctionalityEntity(entity as RootlyEntity);\n        } else {\n          emit(processingResult.generalError(location, error.toString()));\n        }\n      }\n    }\n\n    return entity;\n  }\n\n  async processRootlyTeam(\n    rootlyClient: RootlyApi,\n    entity: Entity,\n    location: LocationSpec,\n    emit: CatalogProcessorEmit,\n  ): Promise<Entity> {\n    const entityTriplet = stringifyEntityRef({\n      namespace: entity.metadata.namespace,\n      kind: entity.kind,\n      name: entity.metadata.name,\n    });\n\n    this.logger.debug(`[ROOTLY PLUGIN] Processing entity ${entityTriplet}`);\n\n    try {\n      const teamIdAnnotation = this.teamIdAnnotations(entity);\n      if (teamIdAnnotation) {\n        const annotationTeamResponse = await rootlyClient.getTeam(\n          teamIdAnnotation,\n        );\n        const annotationTeam = annotationTeamResponse.data;\n\n        if (\n          annotationTeam.attributes.backstage_id &&\n          annotationTeam.attributes.backstage_id !== entityTriplet\n        ) {\n          const teamsResponse = await rootlyClient.getTeams({\n            filter: {\n              backstage_id: annotationTeam.attributes.backstage_id,\n            },\n          });\n          const team =\n            teamsResponse && teamsResponse.data && teamsResponse.data.length > 0\n              ? teamsResponse.data[0]\n              : null;\n          if (team) {\n            const response = await rootlyClient.updateTeamEntity(\n              entity as RootlyEntity,\n              annotationTeam,\n              team,\n            );\n            updateAnnotations(entity, {\n              teamId: response.data.id,\n            });\n          }\n        } else {\n          const response = await rootlyClient.updateTeamEntity(\n            entity as RootlyEntity,\n            annotationTeam,\n          );\n          updateAnnotations(entity, {\n            teamId: response.data.id,\n          });\n        }\n      }\n    } catch (error) {\n      if (error instanceof Error) {\n        if ((error.cause as any).status === 404) {\n          rootlyClient.importTeamEntity(entity as RootlyEntity);\n        } else {\n          emit(processingResult.generalError(location, error.toString()));\n        }\n      }\n    }\n\n    return entity;\n  }\n}\n\nexport type AnnotationUpdateProps = {\n  serviceId?: string;\n  functionalityId?: string;\n  teamId?: string;\n  pagerdutyServiceId?: string;\n};\n\nfunction updateAnnotations(\n  entity: Entity,\n  annotations: AnnotationUpdateProps,\n): void {\n  // If serviceId is present, add the annotations to the entity\n  if (annotations.serviceId && annotations.serviceId !== '') {\n    entity.metadata.annotations!['rootly.com/service-id'] =\n      annotations.serviceId;\n  } else {\n    delete entity.metadata.annotations!['rootly.com/service-id'];\n  }\n\n  // If functionalityId is present, add the annotations to the entity\n  if (annotations.functionalityId && annotations.functionalityId !== '') {\n    entity.metadata.annotations!['rootly.com/functionality-id'] =\n      annotations.functionalityId;\n  } else {\n    delete entity.metadata.annotations!['rootly.com/functionality-id'];\n  }\n\n  // If teamId is present, add the annotations to the entity\n  if (annotations.teamId && annotations.teamId !== '') {\n    entity.metadata.annotations!['rootly.com/team-id'] = annotations.teamId;\n  } else {\n    delete entity.metadata.annotations!['rootly.com/team-id'];\n  }\n}\n","import { coreServices, createBackendModule } from \"@backstage/backend-plugin-api\";\nimport { catalogProcessingExtensionPoint } from '@backstage/plugin-catalog-node/alpha';\nimport { RootlyEntityProcessor } from \"./processor\";\n\n/** @public */\nexport const catalogModuleRootlyReaderProcessor = createBackendModule({\n    pluginId: 'catalog',\n    moduleId: 'rootly-service-entity-processor',\n    register(env) {\n      env.registerInit({\n        deps: {\n          catalog: catalogProcessingExtensionPoint,\n          discovery: coreServices.discovery,\n          config: coreServices.rootConfig,\n          logger: coreServices.logger,\n        },\n        async init({ catalog, discovery, config, logger }) {\n          catalog.addProcessor(new RootlyEntityProcessor({discovery: discovery, config: config, logger: logger}));\n        },\n      });\n    },\n  });"],"names":["ROOTLY_ANNOTATION_SERVICE_ID","ROOTLY_ANNOTATION_SERVICE_SLUG","ROOTLY_ANNOTATION_FUNCTIONALITY_ID","ROOTLY_ANNOTATION_FUNCTIONALITY_SLUG","ROOTLY_ANNOTATION_TEAM_ID","ROOTLY_ANNOTATION_TEAM_SLUG","RootlyApi","ROOTLY_ANNOTATION_ORG_ID","stringifyEntityRef","processingResult","createBackendModule","catalogProcessingExtensionPoint","coreServices"],"mappings":"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"}